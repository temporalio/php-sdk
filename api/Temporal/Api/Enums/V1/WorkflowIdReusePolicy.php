<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: temporal/api/enums/v1/workflow.proto

namespace Temporal\Api\Enums\V1;

use UnexpectedValueException;

/**
 * Protobuf type <code>temporal.api.enums.v1.WorkflowIdReusePolicy</code>
 */
class WorkflowIdReusePolicy
{
    /**
     * Generated from protobuf enum <code>WORKFLOW_ID_REUSE_POLICY_UNSPECIFIED = 0;</code>
     */
    const WORKFLOW_ID_REUSE_POLICY_UNSPECIFIED = 0;
    /**
     * Allow start a workflow execution using the same workflow Id, when workflow not running.
     *
     * Generated from protobuf enum <code>WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE = 1;</code>
     */
    const WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE = 1;
    /**
     * Allow start a workflow execution using the same workflow Id, when workflow not running, and the last execution close state is in
     * [terminated, cancelled, timed out, failed].
     *
     * Generated from protobuf enum <code>WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE_FAILED_ONLY = 2;</code>
     */
    const WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE_FAILED_ONLY = 2;
    /**
     * Do not allow start a workflow execution using the same workflow Id at all.
     *
     * Generated from protobuf enum <code>WORKFLOW_ID_REUSE_POLICY_REJECT_DUPLICATE = 3;</code>
     */
    const WORKFLOW_ID_REUSE_POLICY_REJECT_DUPLICATE = 3;

    private static $valueToName = [
        self::WORKFLOW_ID_REUSE_POLICY_UNSPECIFIED => 'WORKFLOW_ID_REUSE_POLICY_UNSPECIFIED',
        self::WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE => 'WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE',
        self::WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE_FAILED_ONLY => 'WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE_FAILED_ONLY',
        self::WORKFLOW_ID_REUSE_POLICY_REJECT_DUPLICATE => 'WORKFLOW_ID_REUSE_POLICY_REJECT_DUPLICATE',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

